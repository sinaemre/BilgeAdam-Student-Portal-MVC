// <auto-generated />
using System;
using Infrastructure_BilgeAdam.Context.IdentityContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure_BilgeAdam.Context.IdentityContext.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore_BilgeAdam.Entities.UserEntities.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e3569982-6bcc-49ed-b599-6b67ae72d134",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7a6a045-9bc9-4720-b3de-0bb018f802e3",
                            CreatedDate = new DateTime(2023, 11, 28, 16, 10, 1, 677, DateTimeKind.Local).AddTicks(8279),
                            Email = "admin@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDEHMuUAzB+P5Nkd/cmYbWKM3uyIVMwD8v6mFvp6Wop+f/BDcy6MHq6a1u/A4KWr8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a102cb5-a024-4e9f-91a0-96b918f366eb",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "cea12c00-6fae-4243-ae02-e9498d11a3e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3891a373-9bff-4535-b8cd-5651138bb9d9",
                            CreatedDate = new DateTime(2023, 11, 28, 16, 10, 1, 811, DateTimeKind.Local).AddTicks(1841),
                            Email = "student@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "STUDENT@TEST.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEJPISX7OAocfoZXGg6MtfAZPeGov/2ph68pEfEtnScVzMdAVAHjhMbZ5/GYNuNjkGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12dc9e57-3945-4e36-92e7-000773e4f669",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "student"
                        },
                        new
                        {
                            Id = "c0333990-76bc-41c7-9b36-f4b99b6aa33d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8e15377-3beb-400a-8502-dda1c54f0322",
                            CreatedDate = new DateTime(2023, 11, 28, 16, 10, 1, 938, DateTimeKind.Local).AddTicks(6800),
                            Email = "student2@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "STUDENT2@TEST.COM",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFaD2IBNWapZUnOQDtiMVLv+uIg/oKqA8F0wYez3CIkk7RSvONqFMT9Cek/4379bGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a451c1de-dd43-48d0-a330-8f217ce572f8",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = "d7e6ce89-4fdb-4dab-b53f-0d55874de67b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0ff9866-a096-48aa-bdc8-1bdff8352209",
                            CreatedDate = new DateTime(2023, 11, 28, 16, 10, 2, 73, DateTimeKind.Local).AddTicks(6066),
                            Email = "teacher@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "TEACHER@TEST.COM",
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAIAAYagAAAAEG1Qywvj3Ofuow1u+ZFRnDvgp52vGZmhWUBr8OiCDoUmm7HIUVz2ZIiDhs+FdPLQXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e1baf6c-0503-4f7c-82f4-dcc29c0783e5",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = "b83692b7-aaa5-41c9-a97b-5123da9f6eb0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16ddcaf4-4375-4400-9cfb-e4854b90a9c9",
                            CreatedDate = new DateTime(2023, 11, 28, 16, 10, 2, 194, DateTimeKind.Local).AddTicks(6912),
                            Email = "ikpersonel@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "IKPERSONEL@TEST.COM",
                            NormalizedUserName = "IKPERSONEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEL+CnLrEusC6h46UsIdEfVplT+X0W3PSfz61gk7ehlQu34KzfzswUgTHYZBSRK2nGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4742e038-5d79-4615-b6b2-01559c84194e",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ikPersonel"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2941c96f-580d-4fa1-a18f-80dc158b28cb",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "732afff8-a944-45bd-aa94-770cd95f060e",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "51244080-0979-4716-a6b4-d9eca69706ab",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "545c4c20-cb0d-4525-a2ff-f9abfe520851",
                            Name = "ikPersonel",
                            NormalizedName = "IKPERSONEL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e3569982-6bcc-49ed-b599-6b67ae72d134",
                            RoleId = "2941c96f-580d-4fa1-a18f-80dc158b28cb"
                        },
                        new
                        {
                            UserId = "cea12c00-6fae-4243-ae02-e9498d11a3e5",
                            RoleId = "732afff8-a944-45bd-aa94-770cd95f060e"
                        },
                        new
                        {
                            UserId = "c0333990-76bc-41c7-9b36-f4b99b6aa33d",
                            RoleId = "732afff8-a944-45bd-aa94-770cd95f060e"
                        },
                        new
                        {
                            UserId = "d7e6ce89-4fdb-4dab-b53f-0d55874de67b",
                            RoleId = "51244080-0979-4716-a6b4-d9eca69706ab"
                        },
                        new
                        {
                            UserId = "b83692b7-aaa5-41c9-a97b-5123da9f6eb0",
                            RoleId = "545c4c20-cb0d-4525-a2ff-f9abfe520851"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationCore_BilgeAdam.Entities.UserEntities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationCore_BilgeAdam.Entities.UserEntities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore_BilgeAdam.Entities.UserEntities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationCore_BilgeAdam.Entities.UserEntities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
